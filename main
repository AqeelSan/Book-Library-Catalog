#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

struct Book {
    string title;
    string author;
    int publishYear;
    bool isBorrowed;
};

vector<Book> books = {
    {"The Hobbit", "J.R.R. Tolkien", 1937, false},
    {"1984", "George Orwell", 1949, true},
    {"To Kill a Mockingbird", "Harper Lee", 1960, false},
    {"The Great Gatsby", "F. Scott Fitzgerald", 1925, true},
    {"Moby Dick", "Herman Melville", 1851, false},
    {"War and Peace", "Leo Tolstoy", 1869, true},
    {"Pride and Prejudice", "Jane Austen", 1813, false},
    {"The Catcher in the Rye", "J.D. Salinger", 1951, true},
    {"The Odyssey", "Homer", 1800, false},
    {"Ulysses", "James Joyce", 1922, true}
};

void displayBooks() {
    if (books.empty()) {
        cout << "No books available in the library." << endl;
        return;
    }

    for (const auto& book : books) {
        cout << "Title: " << book.title << endl;
        cout << "Author: " << book.author << endl;
        cout << "Publish Year: " << book.publishYear << endl;
        cout << "Status: " << (book.isBorrowed ? "Borrowed" : "Available") << endl;
        cout << "-------------------------------------" << endl;
    }
}

void addBook() {
    string title, author;
    int year;
    char borrowedChar;
    bool isBorrowed;

    cout << "Enter book title: ";
    cin.ignore();
    getline(cin, title);
    
    cout << "Enter author: ";
    getline(cin, author);

    cout << "Enter publish year: ";
    cin >> year;

    cout << "Is the book borrowed? (y/n): ";
    cin >> borrowedChar;
    isBorrowed = (borrowedChar == 'y' || borrowedChar == 'Y');

    books.push_back({title, author, year, isBorrowed});
    cout << "Book added successfully!" << endl;
}

void searchBooks() {
    string query;
    cout << "Enter search query (title or author): ";
    cin.ignore();
    getline(cin, query);

    transform(query.begin(), query.end(), query.begin(), ::tolower);

    vector<Book> results;
    for (const auto& book : books) {
        string titleLower = book.title;
        string authorLower = book.author;
        transform(titleLower.begin(), titleLower.end(), titleLower.begin(), ::tolower);
        transform(authorLower.begin(), authorLower.end(), authorLower.begin(), ::tolower);

        if (titleLower.find(query) != string::npos || authorLower.find(query) != string::npos) {
            results.push_back(book);
        }
    }

    if (results.empty()) {
        cout << "No books found matching the query." << endl;
    } else {
        for (const auto& book : results) {
            cout << "Title: " << book.title << endl;
            cout << "Author: " << book.author << endl;
            cout << "Publish Year: " << book.publishYear << endl;
            cout << "Status: " << (book.isBorrowed ? "Borrowed" : "Available") << endl;
            cout << "-------------------------------------" << endl;
        }
    }
}

void generateStatistics() {
    int totalBooks = books.size();
    int borrowedBooks = 0;

    for (const auto& book : books) {
        if (book.isBorrowed) {
            borrowedBooks++;
        }
    }

    int availableBooks = totalBooks - borrowedBooks;

    cout << "Total Books: " << totalBooks << endl;
    cout << "Borrowed Books: " << borrowedBooks << endl;
    cout << "Available Books: " << availableBooks << endl;
}

int main() {
    int choice;

    while (true) {
        cout << "\nBook Library System" << endl;
        cout << "1. Display All Books" << endl;
        cout << "2. Add a New Book" << endl;
        cout << "3. Search Books" << endl;
        cout << "4. Generate Reading Statistics" << endl;
        cout << "5. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                displayBooks();
                break;
            case 2:
                addBook();
                break;
            case 3:
                searchBooks();
                break;
            case 4:
                generateStatistics();
                break;
            case 5:
                cout << "Exiting the program. Goodbye!" << endl;
                return 0;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }

    return 0;
}
