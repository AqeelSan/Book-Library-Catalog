#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

// Structure to represent a book
struct Book {
    string title;
    string author;
    int publishYear;
    bool isBorrowed;
};

// Vector to store all books
vector<Book> books = {
    {"The Hobbit", "J.R.R. Tolkien", 1937, false},
    {"1984", "George Orwell", 1949, true},
    {"To Kill a Mockingbird", "Harper Lee", 1960, false},
    {"The Great Gatsby", "F. Scott Fitzgerald", 1925, true},
    {"Moby Dick", "Herman Melville", 1851, false},
    {"War and Peace", "Leo Tolstoy", 1869, true},
    {"Pride and Prejudice", "Jane Austen", 1813, false},
    {"The Catcher in the Rye", "J.D. Salinger", 1951, true},
    {"The Odyssey", "Homer", 1800, false},
    {"Ulysses", "James Joyce", 1922, true}
};

// Function to display all books
void displayBooks() {
    if (books.empty()) {
        cout << "No books available in the library.\n";
        return;
    }

    cout << "\nLibrary Books:\n";
    for (size_t i = 0; i < books.size(); ++i) {
        cout << i + 1 << ". Title: " << books[i].title << "\n"
             << "   Author: " << books[i].author << "\n"
             << "   Publish Year: " << books[i].publishYear << "\n"
             << "   Status: " << (books[i].isBorrowed ? "Borrowed" : "Available") << "\n";
    }
}

// Function to add a new book
void addBook() {
    string title, author;
    int year;
    char isBorrowedChar;
    bool isBorrowed;

    cout << "Enter book title: ";
    cin.ignore(); // Clear the input buffer
    getline(cin, title);

    cout << "Enter book author: ";
    getline(cin, author);

    cout << "Enter publish year: ";
    cin >> year;

    cout << "Is the book borrowed? (y/n): ";
    cin >> isBorrowedChar;
    isBorrowed = (tolower(isBorrowedChar) == 'y');

    books.push_back({title, author, year, isBorrowed});
    cout << "Book added successfully!\n";
}

// Function to search books by title or author
void searchBooks() {
    string query;
    cout << "Enter title or author to search: ";
    cin.ignore(); // Clear the input buffer
    getline(cin, query);

    transform(query.begin(), query.end(), query.begin(), ::tolower);

    vector<Book> results;
    for (const auto& book : books) {
        string lowerTitle = book.title, lowerAuthor = book.author;
        transform(lowerTitle.begin(), lowerTitle.end(), lowerTitle.begin(), ::tolower);
        transform(lowerAuthor.begin(), lowerAuthor.end(), lowerAuthor.begin(), ::tolower);

        if (lowerTitle.find(query) != string::npos || lowerAuthor.find(query) != string::npos) {
            results.push_back(book);
        }
    }

    if (results.empty()) {
        cout << "No books found matching the search criteria.\n";
    } else {
        cout << "\nSearch Results:\n";
        for (size_t i = 0; i < results.size(); ++i) {
            cout << i + 1 << ". Title: " << results[i].title << "\n"
                 << "   Author: " << results[i].author << "\n"
                 << "   Publish Year: " << results[i].publishYear << "\n"
                 << "   Status: " << (results[i].isBorrowed ? "Borrowed" : "Available") << "\n";
        }
    }
}

// Function to generate and display reading statistics
void displayStatistics() {
    int totalBooks = books.size();
    int borrowedBooks = count_if(books.begin(), books.end(), [](const Book& book) { return book.isBorrowed; });
    int availableBooks = totalBooks - borrowedBooks;

    cout << "\nReading Statistics:\n";
    cout << "Total Books: " << totalBooks << "\n";
    cout << "Borrowed Books: " << borrowedBooks << "\n";
    cout << "Available Books: " << availableBooks << "\n";
}

// Main menu
void showMenu() {
    cout << "\nLibrary Menu:\n";
    cout << "1. Display All Books\n";
    cout << "2. Add a New Book\n";
    cout << "3. Search Books by Title or Author\n";
    cout << "4. Display Reading Statistics\n";
    cout << "5. Exit\n";
    cout << "Choose an option: ";
}

int main() {
    int choice;

    do {
        showMenu();
        cin >> choice;

        switch (choice) {
            case 1:
                displayBooks();
                break;
            case 2:
                addBook();
                break;
            case 3:
                searchBooks();
                break;
            case 4:
                displayStatistics();
                break;
            case 5:
                cout << "Exiting the program. Goodbye!\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 5);

    return 0;
}
